const MessageNewController = require('../models/NewMessage/MessageNewController');
const moment = require('moment-timezone');
const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
const { colorEmbed } = require('../config');
const ms = require('ms');
const { addMinutes, addHours } = require('date-fns');

const pattern = /\p{Emoji}/u;

const convertMsToDays = (milliseconds) => {
    const days = parseInt(milliseconds / (1000 * 60 * 60 * 24));
    const hours = parseInt((milliseconds % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = parseInt((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = (milliseconds % (1000 * 60)) / 1000;

    return `${days}d ${hours}h ${minutes}m ${seconds}s`;
};

const convertDate = (date) => {

    const offSetMsc = moment.tz.zone("Europe/Moscow").utcOffset(date);
    const offSetServer = new Date().getTimezoneOffset();
    const offSet = offSetServer - offSetMsc;
    date = addMinutes(date, offSet);

    const day = date.getDate();
    let month = date.getMonth() + 1;
    const year = date.getFullYear();
    let hour = date.getHours();
    let minute = date.getMinutes();

    if (month < 10) {
        month = `0${month}`
    }
    if (hour < 10) {
        hour = `0${hour}`
    }
    if (minute < 10) {
        minute = `0${minute}`
    }

    return `${day}.${month}.${year} ${hour}:${minute}`;
};

module.exports = (client) => {
    client.on('messageCreate', async (message) => {
        const guildID = message.guild?.id;
        const userID = message.member?.id;
        const args = message.content.split(' ');
        let messageAnswer;
        let addStageCheck;
        const messageNew = await MessageNewController.findNewMessage({ guildID, userID });

        if (!messageNew) {
            return;
        }

        if (message.content?.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
            const replyCancelEmbed = await MessageNewController.deleteNewMessage({ guildID, userID });
            message.reply({ embeds: [replyCancelEmbed] }).catch(error => console.log(error));

            return;
        }

        const getEmoji = async (argument) => {
            const subStr = argument.substring(
                argument.indexOf(':') + 1,
                argument.lastIndexOf('>')
            );
            const emojiID = subStr.substring(
                subStr.indexOf(':') + 1
            );

            const emoji = await message.guild.emojis.cache.find(emoji => emoji.id === emojiID);
            if (emoji) {
                return argument;
            }

            return null;
        };

        const sendEndMessage = async () => {
            const buttons1 = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId(`title-${userID}`)
                        .setEmoji('üìå')
                        .setLabel('–ó–∞–≥–æ–ª–æ–≤–æ–∫')
                        .setStyle('PRIMARY'),
                    new MessageButton()
                        .setCustomId(`description-${userID}`)
                        .setEmoji('üìù')
                        .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ')
                        .setStyle('PRIMARY'),
                    new MessageButton()
                        .setCustomId(`channel-${userID}`)
                        .setEmoji('üì®')
                        .setLabel('–ö–∞–Ω–∞–ª')
                        .setStyle('PRIMARY'),
                );

            const buttons2 = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId(`time-${userID}`)
                        .setEmoji('üìÖ')
                        .setLabel('–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
                        .setStyle('PRIMARY'),
                    new MessageButton()
                        .setCustomId(`interval-${userID}`)
                        .setEmoji('üîÉ')
                        .setLabel('–ò–Ω—Ç–µ—Ä–≤–∞–ª')
                        .setStyle('PRIMARY'),
                    new MessageButton()
                        .setCustomId(`image-${userID}`)
                        .setEmoji('üåÑ')
                        .setLabel('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
                        .setStyle('PRIMARY'),
                    new MessageButton()
                        .setCustomId(`reactions-${userID}`)
                        .setEmoji('üëç')
                        .setLabel('–†–µ–∞–∫—Ü–∏–∏')
                        .setStyle('PRIMARY'),
                );

            const buttons3 = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId(`accept-${userID}`)
                        .setEmoji('‚úÖ')
                        .setLabel('–ü—Ä–∏–Ω—è—Ç—å')
                        .setStyle('SUCCESS'),
                    new MessageButton()
                        .setCustomId(`cancel-${userID}`)
                        .setEmoji('‚úñ')
                        .setLabel('–û—Ç–º–µ–Ω–∞')
                        .setStyle('DANGER'),
                );

            const createdNewMessage = await MessageNewController.findNewMessage({ guildID, userID })
            const reactions = createdNewMessage.reactions;
            const newMessageEmbed = new MessageEmbed().setColor(colorEmbed);
            const channel = message.guild.channels.cache.find(channel => channel.id === createdNewMessage.channelID);
            if (createdNewMessage.title != `none`) {
                newMessageEmbed.setTitle(createdNewMessage.title);
            }
            if (createdNewMessage.description != `none`) {
                newMessageEmbed.setDescription(createdNewMessage.description);
            }
            if (createdNewMessage.imageUrl != `none`) {
                newMessageEmbed.setImage(createdNewMessage.imageUrl);
            }

            await message.reply({
                embeds: [
                    newMessageEmbed,
                    new MessageEmbed()
                        .setColor(colorEmbed)
                        .setTitle('‚¨Ü –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚¨Ü')
                        .setDescription(`–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${channel} \`${convertDate(createdNewMessage.sendDate)}\`\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: \`${convertMsToDays(messageNew.timerTime)}\`\n–†–µ–∞–∫—Ü–∏–∏: ${reactions.join(', ')}`)
                ],
                components: [buttons1, buttons2, buttons3]
            }).catch(error => console.log(error));

            addStageCheck = await MessageNewController.addStage({ guildID, userID });
            if (addStageCheck) {
                message.reply({
                    embeds: [addStageCheck]
                }).catch(error => console.log(error));

                return;
            }
        };

        switch (messageNew.stage) {
            case 0:
                const title = message.content?.toLowerCase() === '–Ω–µ—Ç' ? 'none' : message.content;
                addStageCheck = await MessageNewController.addStage({ guildID, userID, title });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                if (messageNew.editStage >= 0) {
                    await sendEndMessage();
                    return
                }

                messageAnswer = ['–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ: "–Ω–µ—Ç".']

                break;
            case 1:
                const description = message.content?.toLowerCase() === '–Ω–µ—Ç' ? 'none' : message.content;
                if (messageNew.title === 'none' && description === 'none') {
                    message.reply({
                        embeds: [new MessageEmbed()
                            .setColor('RED')
                            .setTitle('–û—à–∏–±–∫–∞!')
                            .setDescription('–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏/–∏–ª–∏ —Ç–µ–∫—Å—Ç.')
                            .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })
                        ]
                    }).catch(error => console.log(error));
                    return;
                }
                addStageCheck = await MessageNewController.addStage({ guildID, userID, description });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                if (messageNew.editStage >= 0) {
                    await sendEndMessage();
                    return
                }

                messageAnswer = ['–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑?', '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ú–°–ö) –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–Ω–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ: "—Å–µ–π—á–∞—Å" –∏–ª–∏ —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É.']

                break;
            case 2:
                const dateNowUtcMilliseconds = Date.now(Date.UTC());
                let sendDate = new Date(dateNowUtcMilliseconds);
                const offSet = moment.tz.zone("Europe/Moscow").utcOffset(sendDate);
                if (message.content.toLowerCase() === '—Å–µ–π—á–∞—Å') {
                    sendDate = addMinutes(sendDate, offSet);
                } else {
                    const date = args[0]?.split('.');
                    date[1] -= 1;
                    const time = args[1]?.split(':');
                    if (!time || !date || !time[0] || !time[1]) {
                        message.reply({
                            embeds: [new MessageEmbed()
                                .setColor('RED')
                                .setTitle('–û—à–∏–±–∫–∞!')
                                .setDescription('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.')
                                .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })
                            ]
                        }).catch(error => console.log(error));
                        return;
                    }
                    if (time && time[0]?.split('')[0] == '0') {
                        time[0] = time[0].split('')[1];
                    }
                    if (time && time[1]?.split('')[0] == '0') {
                        time[1] = time[1].split('')[1];
                    }

                    sendDate = new Date(Date.UTC(date[2], date[1], date[0], time[0], time[1]));
                    sendDate = addMinutes(sendDate, offSet);
                    if ((sendDate.getFullYear() != date[2] && sendDate.getMonth() != date[1] && sendDate.getDate() != date[0]) || time[0] < 0 || time[1] < 0 || time[0] > 23 || time[1] > 59) {
                        message.reply({
                            embeds: [new MessageEmbed()
                                .setColor('RED')
                                .setTitle('–û—à–∏–±–∫–∞!')
                                .setDescription('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.')
                                .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })
                            ]
                        }).catch(error => console.log(error));
                        return;
                    }
                }

                addStageCheck = await MessageNewController.addStage({ guildID, userID, sendDate });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                if (messageNew.editStage >= 0) {
                    await sendEndMessage();
                    return
                }

                messageAnswer = ['–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å?', '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–∏—Å–ª–æd/h/m/s.\n–ù–∞–ø—Ä–∏–º–µ—Ä: \`5d 1h 30m\`\n–î–ª—è —Ä–∞–∑–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: "–Ω–∏–∫–æ–≥–¥–∞".']

                break;
            case 3:
                if (!args[0]) {
                    message.reply({
                        embeds: [new MessageEmbed()
                            .setColor('RED')
                            .setTitle('–û—à–∏–±–∫–∞!')
                            .setDescription('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.')
                        ]
                    }).catch(error => console.log(error));
                    return;
                }
                let timerTime = 0;
                if (args[0]?.toLowerCase() != '–Ω–∏–∫–æ–≥–¥–∞') {
                    for (let index = 0; index < args.length; index++) {
                        const ml = ms(args[index]);
                        if (ml) {
                            timerTime += ml;
                        }
                    }
                }

                if ((!timerTime || timerTime < 1000) && args[0]?.toLowerCase() != '–Ω–∏–∫–æ–≥–¥–∞') {
                    message.reply({
                        embeds: [new MessageEmbed()
                            .setColor('RED')
                            .setTitle('–û—à–∏–±–∫–∞!')
                            .setDescription('–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞.')
                            .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })

                        ]
                    }).catch(error => console.log(error));
                    return;
                }

                addStageCheck = await MessageNewController.addStage({ guildID, userID, timerTime });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                if (messageNew.editStage >= 0) {
                    await sendEndMessage();
                    return
                }

                messageAnswer = ['–ù—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞?', '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–Ω–µ—Ç".']
                break;
            case 4:
                const file = message.attachments.first()
                const imageUrl = message.content?.toLowerCase() === '–Ω–µ—Ç' ? 'none' : file?.url || undefined;
                if (!imageUrl) {
                    message.reply({
                        embeds: [new MessageEmbed()
                            .setColor('RED')
                            .setTitle('–û—à–∏–±–∫–∞!')
                            .setDescription('–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
                            .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })

                        ]
                    }).catch(error => console.log(error));
                    return;
                }
                addStageCheck = await MessageNewController.addStage({ guildID, userID, imageUrl });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                if (messageNew.editStage >= 0) {
                    await sendEndMessage();
                    return
                }

                messageAnswer = ['–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏?', '–ü—Ä–∏—à–ª–∏—Ç–µ —Å–º–∞–π–ª–∏–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.']
                break;
            case 5:
                const reactions = [];

                for (const arg of args) {
                    const match = pattern.test(arg) || await getEmoji(arg);
                    if (match != null) {
                        reactions.push(arg);
                    }
                }

                addStageCheck = await MessageNewController.addStage({ guildID, userID, reactions });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                if (messageNew.editStage >= 0) {
                    await sendEndMessage();
                    return
                }

                messageAnswer = ['–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?', `–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: ${message.channel}\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º –æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`]
                break;
            case 6:
                const channel = message.mentions.channels.first();
                if (!channel) {
                    message.reply({
                        embeds: [new MessageEmbed()
                            .setColor('RED')
                            .setTitle('–û—à–∏–±–∫–∞!')
                            .setDescription('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª.')
                            .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })

                        ]
                    }).catch(error => console.log(error));
                    return;
                }
                const channelID = channel.id;

                addStageCheck = await MessageNewController.addStage({ guildID, userID, channelID });
                if (addStageCheck) {
                    message.reply({
                        embeds: [addStageCheck]
                    }).catch(error => console.log(error));

                    return;
                }

                await sendEndMessage();

                return;
            default:
                return;
        }

        if (messageAnswer) {
            message.reply({
                embeds: [new MessageEmbed()
                    .setColor(colorEmbed)
                    .setTitle(messageAnswer[0])
                    .setDescription(messageAnswer[1])
                    .setFooter({ text: '–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ: "–æ—Ç–º–µ–Ω–∞".' })
                ]
            }).catch(error => console.log(error));
        }
    });
};

module.exports.config = {
    displayName: 'newMessage',
    dbName: 'newMessage'
};