const { MessageEmbed, MessageButton, MessageActionRow, Message } = require("discord.js");
const { MessageButtonStyles } = require("../../util/Constants.js");
const { Error, RangeError } = require("../../errors");
const Util = require("../../util/Util.js");
const ClassFunction = require("../../util/ClassFunction.js");

/**
 * Setup interaction command button pages with this class
 */
class InteractionButtonPages {

  constructor(data = {}) {
    this.setup(data);
  }

  setup(data) {
    /**
     * The embed of Discord.JS
     * @type {?array<MessageEmbed>}
     */
    this.embeds = data.embeds || null;
    ClassFunction.EmbedsOptions(data.embeds);

    /**
     * The ephemeral of this InteractionButtonPages
     * @type {?boolean}
     */
    this.ephemeral = data.ephemeral || false;
    ClassFunction.EphemeralOptions(data.ephemeral);

    /**
     * The time duration of this InteractionButtonPages
     * @type {?number}
     */
    this.duration = data.duration || 30000;
    ClassFunction.DurationOptions(data.duration);

    /**
     * The counting of this InteractionButtonPages
     * @type {?boolean}
     */
    this.countPage = data.countPage || true;
    ClassFunction.CountPagesOptions(data.countPage);

    /**
     * The label of this InteractionButtonPages
     * @type {?array<string>}
     */
    this.label = data.label || null;
    if (data.label) {
      ClassFunction.LabelOptions(data.label);
      this.label = {
        previous: data.label[0] || undefined,
        stop: data.label[1] || undefined,
        next: data.label[2] || undefined
      }
    }
    else {
      this.label = {
        previous: undefined,
        stop: undefined,
        next: undefined
      }
    }

    /**
     * The emoji of this InteractionButtonPages
     * @type {?array<string>}
     */
    this.emoji = {
      previous: {
        name: undefined,
        id: undefined
      },
      stop: {
        name: undefined,
        id: undefined
      },
      next: {
        name: undefined,
        id: undefined
      }
    };
    ClassFunction.EmojiOptions(data.emoji, this.emoji);

    /**
     * The color of this InteractionButtonPages
     * @type {?array<MessageButtonStyles>}
     */
    this.color = data.color || null;
    if (data.color) {
      ClassFunction.ColorOptions(data.color);
      this.color = {
        previous: data.color[0] || "PRIMARY",
        stop: data.color[1] || "DANGER",
        next: data.color [2] || "PRIMARY"
      }
    }
    else {
      this.color = {
        previous: "PRIMARY",
        stop: "DANGER",
        next: "PRIMARY"
      }
    }

    /**
     * The currentPage of this InteractionButtonPages
     * @type {?number}
     */
    this.currentPage = 0;
    
    return this;
  }
  
  /**
   * Adds embed to create page
   * @param {string} [embed] Embed option in array
   * @returns {InteractionButtonPages[]}
   */
  setEmbeds(embed) {
    ClassFunction.EmbedsOptions(embed);
    
    try {
      this.embeds = embed.map(embeds => new MessageEmbed(embeds));
    } catch(e) {
      throw new Error("INVALID_EMBED");
    }
    return this;
  }

  /**
   * Adds count page of your embeds
   * @param {boolean} [count=true] Count all of your embeds
   * @returns {InteractionButtonPages}
   */
  setEphemeral(ephemeral) {
    ClassFunction.EphemeralOptions(ephemeral);

    if (ephemeral === false) this.ephemeral = false;
    else this.ephemeral = true;
    return this;
  }
  
  /**
   * Adds duration in this option
   * @param {number} time The time duration
   * @returns {InteractionButtonPages}
   */
  setDuration(time) {
    ClassFunction.DurationOptions(time);

    this.duration = time;
    return this;
  }

  /**
   * Adds count page of your embeds
   * @param {boolean} [count=true] Count all of your embeds
   * @returns {InteractionButtonPages}
   */
  setCountPage(counting) {
    ClassFunction.CountPagesOptions(counting);

    if (counting === false) this.countPage = false;
    else this.countPage = true;
    return this;
  }

  /**
   * Custom label of the button
   * @param {string} label Custom word
   * @returns {InteractionButtonPages[]}
   */
  setLabelButton(label) {
    ClassFunction.LabelOptions(label);
    
    if (label[0]) this.label.previous = label[0];
    if (label[1]) this.label.stop = label[1];
    if (label[2]) this.label.next = label[2];
    return this;
  }

  /**
   * Change emoji of the button
   * @param {string} emoji Custom emoji Previous, Stop, Next
   * @returns {InteractionButtonPages[]}
   */
  setEmojiButton(emoji) {
    ClassFunction.EmojiOptions(emoji, this.emoji);
    return this;
  }

  /**
   * Change color of button
   * @param {string} color Custom color Previous, Stop, Next
   * @returns {InteractionButtonPages[]}
   */
  setColorButton(color) {
    ClassFunction.ColorOptions(color);

    this.color.previous = String.prototype.toUpperCase.call(color[0] || "PRIMARY");
    this.color.stop = String.prototype.toUpperCase.call(color[1] || "DANGER");
    this.color.next = String.prototype.toUpperCase.call(color[2] || "PRIMARY");
    return this;
  }



  /**
   * Build page button
   * @param {Message} message Syntax with message
   * @returns {Promise<InteractionButtonPages>}
   */
  build(interaction) {
    if (!interaction)
      throw new RangeError("REQUIRE", "Interaction", "interaction");
    
    if (interaction && interaction.type !== "APPLICATION_COMMAND")
      throw new RangeError("ASYNC_ERROR", "Interaction");
      
    if (this.countPage === true) this.embeds[0].setFooter(`Page 1 of ${this.embeds.length}`).setTimestamp(Date.now());
    if (this.countPage === false) this.embeds[0];
    
    let buttonPrevious = new MessageButton().setCustomId("previous").setStyle("SECONDARY").setDisabled();
    let buttonStop = new MessageButton().setCustomId("stop").setStyle(this.color.stop);
    let buttonNext = new MessageButton().setCustomId("next").setStyle(this.color.next);

    if (this.emoji.previous.name === undefined && this.label.previous === undefined) buttonPrevious.setEmoji("⬅️");
    if (this.emoji.stop.name === undefined && this.label.stop === undefined) buttonStop.setEmoji("❎");
    if (this.emoji.next.name === undefined && this.label.next === undefined) buttonNext.setEmoji("➡️");
    
    if (this.emoji.previous.name || this.emoji.previous.id) buttonPrevious.setEmoji(this.emoji.previous.id || this.emoji.previous.name);
    if (this.emoji.stop.name || this.emoji.stop.id) buttonStop.setEmoji(this.emoji.stop.id || this.emoji.stop.name);
    if (this.emoji.next.name || this.emoji.next.id) buttonNext.setEmoji(this.emoji.next.id || this.emoji.next.name);

    if (this.label.previous) buttonPrevious.setLabel(this.label.previous);
    if (this.label.stop) buttonStop.setLabel(this.label.stop);
    if (this.label.next) buttonNext.setLabel(this.label.next);

    const row = new MessageActionRow().addComponents(buttonPrevious, buttonStop, buttonNext);

    Util.Button(interaction, row, this.embeds, this.ephemeral, this.duration, this.countPage, this.currentPage, this.color, null, "INTERACTION");
  }

  /**
   * Data of this class
   * @returns {InteractionButtonPages}
   */
  toJSON() {
    return {
      embeds: this.embeds,
      ephemeral: this.ephemeral,
      duration: this.duration,
      countPage: this.countPage,
      label: this.label && {
        previous: this.label.previous,
        stop: this.label.stop,
        next: this.label.next,
      },
      emoji: this.emoji && {
        previous: {
          name: this.emoji.previous.name,
          id: this.emoji.previous.id,
        },
        stop: {
          name: this.emoji.stop.name,
          id: this.emoji.stop.id,
        },
        next: {
          name: this.emoji.next.name,
          id: this.emoji.next.id,
        },
      },
      color: this.color && {
        previous: this.color.previous,
        stop: this.color.stop,
        next: this.color.next,
      },
    }
  }
}

module.exports = InteractionButtonPages;